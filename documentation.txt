# Smart farm manager


/ This is project that aims to be an ERP for a farm environment.

First, I set up the Next project which will be the fullstack solution. The DB will be a mongodb database container exposed on 27017 port.

Step 1. Define data model for mongo

So we'll need at least 6 entities:

- Farmers - Utilizatorii sistemului (administratorii fermei) _id, name, email, password, role
- Fields (terenurile) Parcela de teren din fermă _id, name, area, location, soil_type, farmer_id
- Crops (culturile) Tipurile de plante cultivate _id, name, type, planting_date, harvest_date, field_id
- Animals (animalele) Evidența animalelor de fermă _id, tag, species, birth_date, weight, health_status, farmer_id
- Equipment (echipamente) Tractoare, utilaje etc. _id, name, type, status, purchase_date, last_service_date
- Expenses (cheltuieli) Înregistrări financiare _id, category, amount, date, description, farmer_id

A conceptual ERD model is this:
┌──────────────┐           ┌──────────────┐
│   Farmers    │           │   Equipment  │
│--------------│           │--------------│
│ _id          │◄──────────┤ farmer_id    │
│ name         │           │ name         │
│ email        │           │ type         │
│ password     │           │ status       │
│ role         │           │ last_service │
└──────┬───────┘           └──────────────┘
       │
       │1        ┌──────────────┐
       │         │   Fields     │
       │────────►│--------------│
       │         │ _id          │
       │         │ name         │
       │         │ area         │
       │         │ soil_type    │
       │         │ farmer_id    │
       │         └──────┬───────┘
       │                │
       │1               │1..*
       │                ▼
       │         ┌──────────────┐
       │         │   Crops      │
       │         │--------------│
       │         │ _id          │
       │         │ name         │
       │         │ type         │
       │         │ planting_date│
       │         │ harvest_date │
       │         │ field_id     │
       │         └──────────────┘
       │
       │1
       │
       ▼
┌──────────────┐
│   Animals    │
│--------------│
│ _id          │
│ tag          │
│ species      │
│ birth_date   │
│ weight       │
│ health_status│
│ farmer_id    │
└──────────────┘

┌──────────────┐
│   Expenses   │
│--------------│
│ _id          │
│ category     │
│ amount       │
│ date         │
│ description  │
│ farmer_id    │
└──────────────┘
 
Relationship  	    Type            Description
Farmer → Fields	    1-to-many	    A farmer owns many fields
Field → Crops	      1-to-many	    A field has many crops
Farmer → Animals	  1-to-many	    A farmer owns many animals
Farmer → Equipment	1-to-many	    A farmer owns many pieces of equipment
Farmer → Expenses	  1-to-many	    A farmer has many expenses

MongoDB fiind o bază NoSQL, relațiile nu se implementează prin foreign keys reale, ci prin referințe logice (ID-uri).

De exemplu, în Fields salvăm farmer_id (ObjectId al fermierului), iar în Crops salvăm field_id.

-  Define the models inside /models folder for each entity.
- Connect to the MongoDB database using Mongoose in /utils/mongodb.ts file.
- Create a reusable apiClient in /utils/apiClient.ts for making API requests.


1. Modelul de date (baza de date — minim 6 entități)

- următoarele 6 entități principale (logice pentru un ERP de fermă):

| Entitate      | Descriere                                     | Exemple de câmpuri                                            |
| ------------- | --------------------------------------------- | ------------------------------------------------------------- |
| **Farmer**    | utilizatori ai sistemului (admini, lucrători) | name, email, password, role                                   |
| **Field**     | parcele de teren                              | name, area, location, soil_type                               |
| **Crop**      | culturi cultivate pe câmpuri                  | name, type, planting_date, harvest_date, field_id             |
| **Animal**    | animale gestionate în fermă                   | species, birth_date, health_status, location                  |
| **Equipment** | utilaje agricole                              | name, type, status, last_maintenance                          |
| **Task**      | activități agricole planificate               | title, description, date, assigned_to (Farmer), related_field |


2. Funcționalități CRUD (6 machete de introducere/gestiune date)

Va exista câte o interfață completă (frontend + backend) pentru fiecare entitate de mai sus:

| Pagina       | Funcții      | Descriere                                       |
| ------------ | ------------ | ----------------------------------------------- |
| `/farmers`   | CRUD complet | Adăugare, editare, ștergere și listare fermieri |
| `/fields`    | CRUD complet | Gestiune parcele                                |
| `/crops`     | CRUD complet | Gestiune culturi (legat de fields)              |
| `/animals`   | CRUD complet | Gestiune animale                                |
| `/equipment` | CRUD complet | Gestiune utilaje                                |
| `/tasks`     | CRUD complet | Gestiune activități și alocare către fermieri   |


🔹 Acestea vor constitui cele 6 machete de culegere/gestiune cerute de proiect.

3. Rapoarte (minim 4 machete de raportare/interogare date)
Vor exista 4 pagini de raportare, unde combinăm date din mai multe entități:
| Raport                          | Scop                                             | Exemplu de interogare |
| ------------------------------- | ------------------------------------------------ | --------------------- |
| **1️⃣ Crop Report**             | Starea culturilor și randament estimat           | `crops` + `fields`    |
| **2️⃣ Animal Health Report**    | Starea de sănătate a animalelor                  | `animals`             |
| **3️⃣ Equipment Status Report** | Situația utilajelor funcționale și în mentenanță | `equipment`           |
| **4️⃣ Task Overview**           | Activități planificate și executanți             | `tasks` + `farmers`   |

- Se vor adăuga grafice (cu Apache ECharts sau Chart.js) pentru a le face vizuale și interactive.

4. Ordinea de implementare

- Farmers CRUD — deja aproape complet
- Fields CRUD
- Crops CRUD (cu legătură la Field)
- Animals CRUD
- Equipment CRUD
- Tasks CRUD (cu legătură la Farmer și Field)
- Rapoarte și dashboard
- Design și testare finală

5. Arhitectura generală

Backend: API-uri Next.js conectate la MongoDB 

Frontend: React (Next.js) cu pagini dedicate fiecărei entități
